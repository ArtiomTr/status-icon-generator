{"version":3,"sources":["utils/downloadFont.ts","components/StatusPreview.tsx","components/ColorField.tsx","components/StringField.tsx","utils/downloadSvg.ts","components/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["downloadFont","path","Promise","resolve","reject","oReq","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","onerror","send","colorStrong","colorLight","StatusPreview","useFieldValue","backgroundColor","text","useState","textToSvgInstance","setTextToSvgInstance","useEffect","a","font","TextToSVG","parse","run","backgroundImage","backgroundSize","backgroundPosition","justifyContent","alignItems","width","height","viewBox","fill","xmlns","rx","d","getD","fontSize","x","y","anchor","ColorField","name","validator","schema","label","other","useField","value","control","setValue","setTouched","onChange","useCallback","e","target","onBlur","$touched","flexDir","color","position","type","variant","opacity","zIndex","cursor","borderRadius","PlusSquare","marginTop","StringField","handleBlur","downloadSvg","iconName","content","url","encodeURIComponent","downloadLink","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","formBag","useForm","initialValues","onSubmit","tryGetTextFromValue","setFieldValue","old","trim","length","textAlign","flexDirection","h","as","size","textTransform","padding","w","p","className","xmlnsXlink","preserveAspectRatio","id","xlinkHref","bg","href","isExternal","left","bottom","ExternalLink","mx","spacing","leftIcon","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.32e5ad34.chunk.js","sourcesContent":["export const downloadFont = (path: string): Promise<ArrayBuffer> => {\n    return new Promise((resolve, reject) => {\n        const oReq = new XMLHttpRequest();\n        oReq.open('GET', path, true);\n        oReq.responseType = 'arraybuffer';\n\n        oReq.onload = () => {\n            const arrayBuffer = oReq.response;\n\n            resolve(arrayBuffer);\n        };\n\n        oReq.onerror = () => {\n            reject();\n        };\n\n        oReq.send(null);\n    });\n};\n","import { Flex } from '@chakra-ui/react';\nimport { useFieldValue } from '@reactive-forms/core';\nimport React, { useEffect, useState } from 'react';\nimport TextToSVG from 'text-to-svg';\nimport { parse } from 'opentype.js';\nimport { downloadFont } from '../utils/downloadFont';\n\nconst colorStrong = 'var(--chakra-colors-gray-600)';\nconst colorLight = 'var(--chakra-colors-gray-700)';\n\nexport const StatusPreview = () => {\n    const [backgroundColor] = useFieldValue<string>('backgroundColor');\n    const [text] = useFieldValue<string>('text');\n\n    const [textToSvgInstance, setTextToSvgInstance] = useState<TextToSVG>();\n\n    useEffect(() => {\n        const run = async () => {\n            const font = await downloadFont('Roboto-Regular.ttf');\n\n            setTextToSvgInstance(new TextToSVG(parse(font)));\n        };\n\n        run();\n    }, []);\n\n    return (\n        <Flex\n            backgroundImage={`linear-gradient(${colorStrong} 2px, transparent 2px), linear-gradient(90deg, ${colorStrong} 2px, transparent 1px), linear-gradient(${colorLight} 1px, transparent 1px), linear-gradient(90deg, ${colorLight} 1px, transparent 1px);`}\n            backgroundSize=\"100px 100px, 100px 100px, 20px 20px, 20px 20px\"\n            backgroundPosition=\"-50px -50px\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            width={500}\n            height={500}\n        >\n            <svg width={250} height={250} viewBox=\"0 0 30 30\" fill={backgroundColor} xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"30\" height=\"30\" rx=\"2\" fill=\"inherit\"></rect>\n                <path\n                    fill=\"#fff\"\n                    d={textToSvgInstance?.getD(text, { fontSize: 16, x: 15, y: 15, anchor: 'center middle' })}\n                />\n            </svg>\n        </Flex>\n    );\n};\n","import { InputGroup, InputLeftElement, Input, Box, Text, Flex, InputProps } from '@chakra-ui/react';\nimport { FieldConfig, useField } from '@reactive-forms/core';\nimport React, { useCallback } from 'react';\nimport { PlusSquareIcon } from '@chakra-ui/icons';\n\nexport type ColorFieldProps = FieldConfig<string> &\n    Omit<InputProps, 'value' | 'onChange' | 'onBlur'> & {\n        label?: string;\n    };\n\nexport const ColorField = ({ name, validator, schema, label, ...other }: ColorFieldProps) => {\n    const {\n        value,\n        // meta: { error, touched },\n        control: { setValue, setTouched },\n    } = useField({ name, validator, schema });\n\n    const onChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setValue(e.target.value);\n        },\n        [setValue]\n    );\n\n    const onBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            setTouched({ $touched: true });\n        },\n        [setTouched]\n    );\n\n    return (\n        <Flex flexDir=\"column\" alignItems=\"flex-start\">\n            {label && (\n                <Text color=\"gray.300\" fontSize=\"sm\">\n                    {label}\n                </Text>\n            )}\n            <InputGroup>\n                <InputLeftElement>\n                    <Box position=\"relative\">\n                        <Input\n                            type=\"color\"\n                            name={name}\n                            variant=\"filled\"\n                            value={value}\n                            onChange={onChange}\n                            opacity=\"0\"\n                            zIndex=\"2\"\n                            cursor=\"pointer\"\n                        />\n                    </Box>\n                    <Box position=\"absolute\">\n                        {value ? (\n                            <Box backgroundColor={value} borderRadius=\"50%\" width=\"10px\" height=\"10px\" />\n                        ) : (\n                            <PlusSquareIcon marginTop=\"-5px\" />\n                        )}\n                    </Box>\n                </InputLeftElement>\n                <Input name={name} variant=\"filled\" value={value} onChange={onChange} onBlur={onBlur} {...other} />\n            </InputGroup>\n        </Flex>\n    );\n};\n","import { Flex, Input, InputProps, Text } from '@chakra-ui/react';\nimport { FieldConfig, useField } from '@reactive-forms/core';\nimport React, { useCallback } from 'react';\n\nexport type StringFieldProps = FieldConfig<string> &\n    Omit<InputProps, 'value' | 'onChange'> & {\n        label?: string;\n    };\n\nexport const StringField = ({ name, validator, schema, label, onBlur, ...other }: StringFieldProps) => {\n    const {\n        value,\n        // meta: { error, touched },\n        control: { setValue, setTouched },\n    } = useField({ name, validator, schema });\n\n    const onChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setValue(e.target.value);\n        },\n        [setValue]\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            setTouched({ $touched: true });\n            onBlur?.(e);\n        },\n        [setTouched, onBlur]\n    );\n\n    return (\n        <Flex flexDir=\"column\" alignItems=\"flex-start\">\n            {label && (\n                <Text color=\"gray.300\" fontSize=\"sm\">\n                    {label}\n                </Text>\n            )}\n            <Input name={name} variant=\"filled\" value={value} onChange={onChange} onBlur={handleBlur} {...other} />\n        </Flex>\n    );\n};\n","import TextToSVG from 'text-to-svg';\nimport { parse } from 'opentype.js';\nimport { downloadFont } from './downloadFont';\n\nexport const downloadSvg = async ({\n    backgroundColor,\n    text,\n    iconName,\n}: {\n    backgroundColor: string;\n    text: string;\n    iconName: string;\n}): Promise<void> => {\n    const font = await downloadFont('Roboto-Regular.ttf');\n    const textToSvgInstance = new TextToSVG(parse(font));\n\n    const content = `<svg viewBox=\"0 0 30 30\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"30\" height=\"30\" rx=\"2\" fill=\"${backgroundColor}\"></rect><path fill=\"#fff\" d=\"${textToSvgInstance.getD(\n        text,\n        { fontSize: 16, x: 15, y: 15, anchor: 'center middle' }\n    )}\"></path></svg>`;\n\n    const url = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(content);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.setAttribute('href', url);\n    downloadLink.setAttribute('download', `${iconName}.svg`);\n    downloadLink.style.display = 'none';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\n","import * as React from 'react';\nimport { ChakraProvider, Box, extendTheme, Heading, VStack, Button, Link, Center } from '@chakra-ui/react';\nimport { StatusPreview } from './StatusPreview';\nimport { ExternalLinkIcon } from '@chakra-ui/icons';\nimport { ReactiveFormProvider, useForm } from '@reactive-forms/core';\nimport { Form } from '@reactive-forms/dom';\nimport { ColorField } from './ColorField';\nimport { StringField } from './StringField';\nimport { IoMdArrowDown } from 'react-icons/io';\nimport { downloadSvg } from '../utils/downloadSvg';\nimport './App.scss';\n\nconst theme = extendTheme({\n    config: {\n        initialColorMode: 'dark',\n        useSystemColorMode: false,\n    },\n});\n\nexport const App = () => {\n    const formBag = useForm({\n        initialValues: {\n            backgroundColor: '',\n            iconName: '',\n            text: '',\n        },\n        onSubmit: downloadSvg,\n    });\n\n    const tryGetTextFromValue = (e: React.FocusEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n\n        formBag.setFieldValue('text', (old: string) => {\n            if (typeof old !== 'string' || old.trim().length === 0) {\n                return value[0] || '';\n            }\n\n            return old;\n        });\n    };\n\n    return (\n        <ChakraProvider theme={theme}>\n            <Box textAlign=\"center\" fontSize=\"xl\">\n                <ReactiveFormProvider formBag={formBag}>\n                    {() => (\n                        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" h=\"100vh\">\n                            <Box>\n                                <Heading as=\"h2\" size=\"xl\" textTransform=\"uppercase\" padding=\"20px 0 0 0\">\n                                    Status icon generator\n                                </Heading>\n                            </Box>\n                            <Center w=\"100%\" p={4} color=\"white\" h=\"100%\">\n                                <StatusPreview />\n                            </Center>\n                            <Box w=\"100%\">\n                                <Box w=\"100%\" p={4} color=\"white\" padding=\"0\">\n                                    <div>\n                                        <svg\n                                            className=\"waves\"\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                                            viewBox=\"0 24 150 28\"\n                                            preserveAspectRatio=\"none\"\n                                            shape-rendering=\"auto\"\n                                        >\n                                            <defs>\n                                                <path\n                                                    id=\"gentle-wave\"\n                                                    d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\"\n                                                />\n                                            </defs>\n                                            <g className=\"parallax\">\n                                                <use xlinkHref=\"#gentle-wave\" x=\"48\" y=\"0\" fill=\"rgb(46, 136, 137)\" />\n                                                <use xlinkHref=\"#gentle-wave\" x=\"48\" y=\"0\" fill=\"rgb(42, 116, 119)\" />\n                                                <use xlinkHref=\"#gentle-wave\" x=\"48\" y=\"0\" fill=\"rgb(39, 97, 100)\" />\n                                            </g>\n                                        </svg>\n                                    </div>\n                                </Box>\n                                <Box\n                                    w=\"100%\"\n                                    p={4}\n                                    color=\"white\"\n                                    bg=\"#276164\"\n                                    justifyContent=\"center\"\n                                    display=\"flex\"\n                                    position=\"relative\"\n                                >\n                                    <Link\n                                        href=\"https://github.com/fracht/status-icon-generator\"\n                                        isExternal\n                                        position=\"absolute\"\n                                        left=\"20px\"\n                                        bottom=\"20px\"\n                                    >\n                                        Github <ExternalLinkIcon mx=\"2px\" />\n                                    </Link>\n                                    <Box w=\"300px\" padding=\"30px 0\">\n                                        <Form>\n                                            <VStack alignItems=\"stretch\" spacing=\"2\">\n                                                <ColorField label=\"Background color\" name=\"backgroundColor\" />\n                                                <StringField\n                                                    onBlur={tryGetTextFromValue}\n                                                    label=\"Icon name\"\n                                                    name=\"iconName\"\n                                                />\n                                                <StringField label=\"Icon text\" name=\"text\" />\n                                                <Box>\n                                                    <Button\n                                                        type=\"submit\"\n                                                        leftIcon={<IoMdArrowDown size=\"20px\" />}\n                                                        marginTop=\"2\"\n                                                    >\n                                                        Download\n                                                    </Button>\n                                                </Box>\n                                            </VStack>\n                                        </Form>\n                                    </Box>\n                                </Box>\n                            </Box>\n                        </Box>\n                    )}\n                </ReactiveFormProvider>\n            </Box>\n        </ChakraProvider>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://cra.link/PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://cra.link/PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It is the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport * as serviceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ColorModeScript />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();\n"],"sourceRoot":""}