{"version":3,"sources":["assets/layered-waves-haikei.svg","utils/downloadFont.ts","components/StatusPreview.tsx","components/ColorField.tsx","components/StringField.tsx","utils/downloadSvg.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["_path","_path2","_path3","_path4","_path5","_path6","downloadFont","path","Promise","resolve","reject","oReq","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","onerror","send","colorStrong","colorLight","StatusPreview","useFieldValue","backgroundColor","text","useState","textToSvgInstance","setTextToSvgInstance","useEffect","a","font","TextToSVG","parse","run","backgroundImage","backgroundSize","backgroundPosition","justifyContent","alignItems","width","height","viewBox","fill","xmlns","rx","d","getD","fontSize","x","y","anchor","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgLayeredWavesHaikei","_ref","svgRef","title","titleId","props","id","xmlnsXlink","ref","ForwardRef","ColorField","name","validator","schema","label","other","useField","value","control","setValue","setTouched","onChange","useCallback","e","onBlur","$touched","flexDir","color","borderRadius","variant","StringField","handleBlur","downloadSvg","iconName","content","url","encodeURIComponent","downloadLink","document","createElement","setAttribute","style","display","body","appendChild","click","removeChild","theme","extendTheme","config","initialColorMode","useSystemColorMode","App","formBag","useForm","initialValues","onSubmit","tryGetTextFromValue","setFieldValue","old","trim","textAlign","templateColumns","minH","paddingX","mt","spacing","type","leftIcon","size","marginTop","href","position","top","left","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3651bd3.chunk.js","sourcesContent":["var _path, _path2, _path3, _path4, _path5, _path6;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgLayeredWavesHaikei(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"visual\",\n    viewBox: \"0 0 500 1920\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M414 0L402 20C390 40 366 80 366 120C366 160 390 200 404.2 240C418.3 280 422.7 320 421.8 360C421 400 415 440 402.3 480C389.7 520 370.3 560 371.7 600C373 640 395 680 408.7 720C422.3 760 427.7 800 413.7 840C399.7 880 366.3 920 351.3 960C336.3 1000 339.7 1040 351.2 1080C362.7 1120 382.3 1160 386.8 1200C391.3 1240 380.7 1280 373.5 1320C366.3 1360 362.7 1400 358.8 1440C355 1480 351 1520 364.8 1560C378.7 1600 410.3 1640 407.8 1680C405.3 1720 368.7 1760 369 1800C369.3 1840 406.7 1880 425.3 1900L444 1920L0 1920L0 1900C0 1880 0 1840 0 1800C0 1760 0 1720 0 1680C0 1640 0 1600 0 1560C0 1520 0 1480 0 1440C0 1400 0 1360 0 1320C0 1280 0 1240 0 1200C0 1160 0 1120 0 1080C0 1040 0 1000 0 960C0 920 0 880 0 840C0 800 0 760 0 720C0 680 0 640 0 600C0 560 0 520 0 480C0 440 0 400 0 360C0 320 0 280 0 240C0 200 0 160 0 120C0 80 0 40 0 20L0 0Z\",\n    fill: \"#38b2ac\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M288 0L301.8 20C315.7 40 343.3 80 352.5 120C361.7 160 352.3 200 340.8 240C329.3 280 315.7 320 319.8 360C324 400 346 440 359.5 480C373 520 378 560 365.7 600C353.3 640 323.7 680 318.8 720C314 760 334 800 340.8 840C347.7 880 341.3 920 333.5 960C325.7 1000 316.3 1040 324.7 1080C333 1120 359 1160 361.5 1200C364 1240 343 1280 339.2 1320C335.3 1360 348.7 1400 351.8 1440C355 1480 348 1520 352 1560C356 1600 371 1640 364.7 1680C358.3 1720 330.7 1760 327.8 1800C325 1840 347 1880 358 1900L369 1920L0 1920L0 1900C0 1880 0 1840 0 1800C0 1760 0 1720 0 1680C0 1640 0 1600 0 1560C0 1520 0 1480 0 1440C0 1400 0 1360 0 1320C0 1280 0 1240 0 1200C0 1160 0 1120 0 1080C0 1040 0 1000 0 960C0 920 0 880 0 840C0 800 0 760 0 720C0 680 0 640 0 600C0 560 0 520 0 480C0 440 0 400 0 360C0 320 0 280 0 240C0 200 0 160 0 120C0 80 0 40 0 20L0 0Z\",\n    fill: \"#329d9b\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260 0L255.3 20C250.7 40 241.3 80 234.8 120C228.3 160 224.7 200 227 240C229.3 280 237.7 320 237.2 360C236.7 400 227.3 440 235.8 480C244.3 520 270.7 560 277.7 600C284.7 640 272.3 680 260.2 720C248 760 236 800 230.7 840C225.3 880 226.7 920 225.3 960C224 1000 220 1040 231.2 1080C242.3 1120 268.7 1160 270.2 1200C271.7 1240 248.3 1280 234.5 1320C220.7 1360 216.3 1400 216.8 1440C217.3 1480 222.7 1520 222.7 1560C222.7 1600 217.3 1640 221.5 1680C225.7 1720 239.3 1760 248.3 1800C257.3 1840 261.7 1880 263.8 1900L266 1920L0 1920L0 1900C0 1880 0 1840 0 1800C0 1760 0 1720 0 1680C0 1640 0 1600 0 1560C0 1520 0 1480 0 1440C0 1400 0 1360 0 1320C0 1280 0 1240 0 1200C0 1160 0 1120 0 1080C0 1040 0 1000 0 960C0 920 0 880 0 840C0 800 0 760 0 720C0 680 0 640 0 600C0 560 0 520 0 480C0 440 0 400 0 360C0 320 0 280 0 240C0 200 0 160 0 120C0 80 0 40 0 20L0 0Z\",\n    fill: \"#2e8889\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M237 0L227.3 20C217.7 40 198.3 80 191.2 120C184 160 189 200 184.2 240C179.3 280 164.7 320 170.5 360C176.3 400 202.7 440 218.8 480C235 520 241 560 243.5 600C246 640 245 680 244.8 720C244.7 760 245.3 800 236 840C226.7 880 207.3 920 207.3 960C207.3 1000 226.7 1040 233.7 1080C240.7 1120 235.3 1160 224.2 1200C213 1240 196 1280 198.2 1320C200.3 1360 221.7 1400 222.8 1440C224 1480 205 1520 193.7 1560C182.3 1600 178.7 1640 174.3 1680C170 1720 165 1760 161 1800C157 1840 154 1880 152.5 1900L151 1920L0 1920L0 1900C0 1880 0 1840 0 1800C0 1760 0 1720 0 1680C0 1640 0 1600 0 1560C0 1520 0 1480 0 1440C0 1400 0 1360 0 1320C0 1280 0 1240 0 1200C0 1160 0 1120 0 1080C0 1040 0 1000 0 960C0 920 0 880 0 840C0 800 0 760 0 720C0 680 0 640 0 600C0 560 0 520 0 480C0 440 0 400 0 360C0 320 0 280 0 240C0 200 0 160 0 120C0 80 0 40 0 20L0 0Z\",\n    fill: \"#2a7477\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M141 0L140.8 20C140.7 40 140.3 80 133.2 120C126 160 112 200 109.7 240C107.3 280 116.7 320 125 360C133.3 400 140.7 440 145 480C149.3 520 150.7 560 154.5 600C158.3 640 164.7 680 169.8 720C175 760 179 800 172 840C165 880 147 920 146.7 960C146.3 1000 163.7 1040 167.8 1080C172 1120 163 1160 154.7 1200C146.3 1240 138.7 1280 142.7 1320C146.7 1360 162.3 1400 162.3 1440C162.3 1480 146.7 1520 142 1560C137.3 1600 143.7 1640 137.2 1680C130.7 1720 111.3 1760 103.7 1800C96 1840 100 1880 102 1900L104 1920L0 1920L0 1900C0 1880 0 1840 0 1800C0 1760 0 1720 0 1680C0 1640 0 1600 0 1560C0 1520 0 1480 0 1440C0 1400 0 1360 0 1320C0 1280 0 1240 0 1200C0 1160 0 1120 0 1080C0 1040 0 1000 0 960C0 920 0 880 0 840C0 800 0 760 0 720C0 680 0 640 0 600C0 560 0 520 0 480C0 440 0 400 0 360C0 320 0 280 0 240C0 200 0 160 0 120C0 80 0 40 0 20L0 0Z\",\n    fill: \"#276164\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M107 0L94.2 20C81.3 40 55.7 80 43.3 120C31 160 32 200 42.7 240C53.3 280 73.7 320 82 360C90.3 400 86.7 440 84 480C81.3 520 79.7 560 79.8 600C80 640 82 680 83.5 720C85 760 86 800 82.5 840C79 880 71 920 71.7 960C72.3 1000 81.7 1040 88.5 1080C95.3 1120 99.7 1160 100.8 1200C102 1240 100 1280 95.2 1320C90.3 1360 82.7 1400 73 1440C63.3 1480 51.7 1520 48.3 1560C45 1600 50 1640 60.2 1680C70.3 1720 85.7 1760 91.7 1800C97.7 1840 94.3 1880 92.7 1900L91 1920L0 1920L0 1900C0 1880 0 1840 0 1800C0 1760 0 1720 0 1680C0 1640 0 1600 0 1560C0 1520 0 1480 0 1440C0 1400 0 1360 0 1320C0 1280 0 1240 0 1200C0 1160 0 1120 0 1080C0 1040 0 1000 0 960C0 920 0 880 0 840C0 800 0 760 0 720C0 680 0 640 0 600C0 560 0 520 0 480C0 440 0 400 0 360C0 320 0 280 0 240C0 200 0 160 0 120C0 80 0 40 0 20L0 0Z\",\n    fill: \"#234e52\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLayeredWavesHaikei);\nexport default __webpack_public_path__ + \"static/media/layered-waves-haikei.4f395eac.svg\";\nexport { ForwardRef as ReactComponent };","export const downloadFont = (path: string): Promise<ArrayBuffer> => {\n    return new Promise((resolve, reject) => {\n        const oReq = new XMLHttpRequest();\n        oReq.open('GET', path, true);\n        oReq.responseType = 'arraybuffer';\n\n        oReq.onload = () => {\n            const arrayBuffer = oReq.response;\n\n            resolve(arrayBuffer);\n        };\n\n        oReq.onerror = () => {\n            reject();\n        };\n\n        oReq.send(null);\n    });\n};\n","import { Flex } from '@chakra-ui/react';\nimport { useFieldValue } from '@reactive-forms/core';\nimport React, { useEffect, useState } from 'react';\nimport TextToSVG from 'text-to-svg';\nimport { parse } from 'opentype.js';\nimport { downloadFont } from '../utils/downloadFont';\n\nconst colorStrong = 'var(--chakra-colors-gray-600)';\nconst colorLight = 'var(--chakra-colors-gray-700)';\n\nexport const StatusPreview = () => {\n    const [backgroundColor] = useFieldValue<string>('backgroundColor');\n    const [text] = useFieldValue<string>('text');\n\n    const [textToSvgInstance, setTextToSvgInstance] = useState<TextToSVG>();\n\n    useEffect(() => {\n        const run = async () => {\n            const font = await downloadFont('Roboto-Regular.ttf');\n\n            setTextToSvgInstance(new TextToSVG(parse(font)));\n        };\n\n        run();\n    }, []);\n\n    return (\n        <Flex\n            backgroundImage={`linear-gradient(${colorStrong} 2px, transparent 2px), linear-gradient(90deg, ${colorStrong} 2px, transparent 1px), linear-gradient(${colorLight} 1px, transparent 1px), linear-gradient(90deg, ${colorLight} 1px, transparent 1px);`}\n            backgroundSize=\"100px 100px, 100px 100px, 20px 20px, 20px 20px\"\n            backgroundPosition=\"-50px -50px\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            width={500}\n            height={500}\n        >\n            <svg width={250} height={250} viewBox=\"0 0 30 30\" fill={backgroundColor} xmlns=\"http://www.w3.org/2000/svg\">\n                <rect width=\"30\" height=\"30\" rx=\"2\" fill=\"inherit\"></rect>\n                <path\n                    fill=\"#fff\"\n                    d={textToSvgInstance?.getD(text, { fontSize: 16, x: 15, y: 15, anchor: 'center middle' })}\n                />\n            </svg>\n        </Flex>\n    );\n};\n","import { InputGroup, InputLeftElement, Input, Box, Text, Flex, InputProps } from '@chakra-ui/react';\nimport { FieldConfig, useField } from '@reactive-forms/core';\nimport React, { useCallback } from 'react';\n\nexport type ColorFieldProps = FieldConfig<string> &\n    Omit<InputProps, 'value' | 'onChange' | 'onBlur'> & {\n        label?: string;\n    };\n\nexport const ColorField = ({ name, validator, schema, label, ...other }: ColorFieldProps) => {\n    const {\n        value,\n        // meta: { error, touched },\n        control: { setValue, setTouched },\n    } = useField({ name, validator, schema });\n\n    const onChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setValue(e.target.value);\n        },\n        [setValue]\n    );\n\n    const onBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            setTouched({ $touched: true });\n        },\n        [setTouched]\n    );\n\n    return (\n        <Flex flexDir=\"column\" alignItems=\"flex-start\">\n            {label && (\n                <Text color=\"gray.300\" fontSize=\"sm\">\n                    {label}\n                </Text>\n            )}\n            <InputGroup>\n                <InputLeftElement>\n                    <Box backgroundColor={value} borderRadius=\"50%\" width=\"10px\" height=\"10px\" />\n                </InputLeftElement>\n                <Input name={name} variant=\"filled\" value={value} onChange={onChange} onBlur={onBlur} {...other} />\n            </InputGroup>\n        </Flex>\n    );\n};\n","import { Flex, Input, InputProps, Text } from '@chakra-ui/react';\nimport { FieldConfig, useField } from '@reactive-forms/core';\nimport React, { useCallback } from 'react';\n\nexport type StringFieldProps = FieldConfig<string> &\n    Omit<InputProps, 'value' | 'onChange'> & {\n        label?: string;\n    };\n\nexport const StringField = ({ name, validator, schema, label, onBlur, ...other }: StringFieldProps) => {\n    const {\n        value,\n        // meta: { error, touched },\n        control: { setValue, setTouched },\n    } = useField({ name, validator, schema });\n\n    const onChange = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            setValue(e.target.value);\n        },\n        [setValue]\n    );\n\n    const handleBlur = useCallback(\n        (e: React.FocusEvent<HTMLInputElement>) => {\n            setTouched({ $touched: true });\n            onBlur?.(e);\n        },\n        [setTouched, onBlur]\n    );\n\n    return (\n        <Flex flexDir=\"column\" alignItems=\"flex-start\">\n            {label && (\n                <Text color=\"gray.300\" fontSize=\"sm\">\n                    {label}\n                </Text>\n            )}\n            <Input name={name} variant=\"filled\" value={value} onChange={onChange} onBlur={handleBlur} {...other} />\n        </Flex>\n    );\n};\n","import TextToSVG from 'text-to-svg';\nimport { parse } from 'opentype.js';\nimport { downloadFont } from './downloadFont';\n\nexport const downloadSvg = async ({\n    backgroundColor,\n    text,\n    iconName,\n}: {\n    backgroundColor: string;\n    text: string;\n    iconName: string;\n}): Promise<void> => {\n    const font = await downloadFont('Roboto-Regular.ttf');\n    const textToSvgInstance = new TextToSVG(parse(font));\n\n    const content = `<svg viewBox=\"0 0 30 30\" fill=\"${backgroundColor}\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"30\" height=\"30\" rx=\"2\" fill=\"inherit\"></rect><path fill=\"#fff\" d=\"${textToSvgInstance.getD(\n        text,\n        { fontSize: 16, x: 15, y: 15, anchor: 'center middle' }\n    )}\"></path></svg>`;\n\n    const url = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(content);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.setAttribute('href', url);\n    downloadLink.setAttribute('download', `${iconName}.svg`);\n    downloadLink.style.display = 'none';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\n","import * as React from 'react';\nimport { ChakraProvider, Box, Grid, Flex, extendTheme, Heading, VStack, Button, Link } from '@chakra-ui/react';\nimport { StatusPreview } from './StatusPreview';\nimport { ReactComponent as Waves } from '../assets/layered-waves-haikei.svg';\nimport { ReactiveFormProvider, useForm } from '@reactive-forms/core';\nimport { Form } from '@reactive-forms/dom';\nimport { ColorField } from './ColorField';\nimport { StringField } from './StringField';\nimport { IoMdArrowDown } from 'react-icons/io';\nimport { downloadSvg } from '../utils/downloadSvg';\n\nconst theme = extendTheme({\n    config: {\n        initialColorMode: 'dark',\n        useSystemColorMode: false,\n    },\n});\n\nexport const App = () => {\n    const formBag = useForm({\n        initialValues: {\n            backgroundColor: '',\n            iconName: '',\n            text: '',\n        },\n        onSubmit: downloadSvg,\n    });\n\n    const tryGetTextFromValue = (e: React.FocusEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n\n        formBag.setFieldValue('text', (old: string) => {\n            if (old.trim().length === 0) {\n                return value[0];\n            }\n\n            return old;\n        });\n    };\n\n    return (\n        <ChakraProvider theme={theme}>\n            <Box textAlign=\"center\" fontSize=\"xl\">\n                <ReactiveFormProvider formBag={formBag}>\n                    {() => (\n                        <Grid templateColumns=\"300px 1fr\" minH=\"100vh\">\n                            <Flex\n                                justifyContent=\"space-between\"\n                                flexDir=\"column\"\n                                paddingX=\"3\"\n                                backgroundColor=\"teal.800\"\n                            >\n                                <Heading mt=\"10\" fontSize=\"xl\">\n                                    Status icon generator\n                                </Heading>\n                                <Box>\n                                    <Form>\n                                        <VStack alignItems=\"stretch\" spacing=\"2\">\n                                            <ColorField label=\"Background color\" name=\"backgroundColor\" />\n                                            <StringField\n                                                onBlur={tryGetTextFromValue}\n                                                label=\"Icon name\"\n                                                name=\"iconName\"\n                                            />\n                                            <StringField label=\"Icon text\" name=\"text\" />\n                                            <Box>\n                                                <Button\n                                                    type=\"submit\"\n                                                    leftIcon={<IoMdArrowDown size=\"20px\" />}\n                                                    marginTop=\"2\"\n                                                >\n                                                    Download\n                                                </Button>\n                                            </Box>\n                                        </VStack>\n                                    </Form>\n                                </Box>\n                                <Box>\n                                    <Link fontSize=\"sm\" href=\"https://github.com/ArtiomTr/status-icon-generator\">\n                                        GitHub\n                                    </Link>\n                                </Box>\n                            </Flex>\n                            <Flex position=\"relative\" justifyContent=\"center\" alignItems=\"center\">\n                                <Box position=\"absolute\" top=\"0\" left=\"0\">\n                                    <Waves height=\"100vh\" />\n                                </Box>\n                                <StatusPreview />\n                            </Flex>\n                        </Grid>\n                    )}\n                </ReactiveFormProvider>\n            </Box>\n        </ChakraProvider>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://cra.link/PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://cra.link/PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It is the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <ColorModeScript />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();\n"],"sourceRoot":""}